package com.prtech.svarog;

import static org.junit.Assert.fail;

import java.util.Set;

import org.junit.Test;

import com.prtech.svarog_common.DbDataObject;
import com.vividsolutions.jts.geom.Envelope;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.Polygon;
import com.vividsolutions.jts.io.ParseException;
import com.vividsolutions.jts.io.WKTReader;

public class SvGeometryMKTest {
	String poly = "POLYGON ((7589394.765 4589259.853, 7589395.837 4589234.824, 7589401.488 4589234.824, 7589428.666 4589225.137, 7589436.516 4589210.514, 7589462.133 4589186.634, 7589472.554 4589141.044, 7589525.09 4589068.1, 7589579.577 4588999.931, 7589596.076 4588967.367, 7589652.086 4588948.262, 7589688.124 4588951.736, 7589716.78 4588968.235, 7589735.016 4589051.165, 7589710.267 4589046.389, 7589686.821 4589054.204, 7589667.283 4589106.741, 7589659.033 4589182.29, 7589715.911 4589190.105, 7589772.356 4589182.29, 7589830.971 4589182.724, 7589849.207 4589177.948, 7589842.26 4589202.697, 7589831.84 4589274.772, 7589849.641 4589322.098, 7589864.838 4589364.648, 7589862.233 4589402.423, 7589821.854 4589505.759, 7589822.288 4589522.692, 7589805.354 4589554.822, 7589772.79 4589583.479, 7589748.956 4589595.621, 7589732.891 4589607.778, 7589709.879 4589626.883, 7589685.999 4589648.158, 7589640.843 4589676.38, 7589604.806 4589693.747, 7589565.729 4589702.865, 7589537.507 4589715.457, 7589510.153 4589735.429, 7589480.628 4589781.887, 7589451.103 4589824.438, 7589429.394 4589867.422, 7589381.633 4589935.59, 7589353.411 4589969.891, 7589336.912 4590017.216, 7589278.731 4590104.922, 7589224.457 4590143.565, 7589194.499 4590160.064, 7589171.487 4590162.669, 7589139.357 4590171.353, 7589111.135 4590182.642, 7589079.005 4590197.404, 7589052.085 4590219.114, 7589029.507 4590234.3100000005, 7589019.955 4590249.073, 7589007.798 4590269.046, 7588994.772 4590295.531, 7588975.234 4590324.622, 7588960.472 4590326.792, 7588905.33 4590340.686, 7588827.175 4590424.919, 7588766.389 4590363.699, 7588749.455 4590346.766, 7588732.088 4590314.201, 7588721.667 4590281.637, 7588699.09 4590240.39, 7588672.821 4590206.849, 7588646.77 4590179.929, 7588632.224 4590167.88, 7588614.205 4590156.592, 7588583.378 4590140.092, 7588564.925 4590129.89, 7588553.202 4590126.199, 7588537.572 4590117.732, 7588527.368 4590111.654, 7588511.955 4590101.884, 7588504.573 4590095.155, 7588503.922 4590085.386, 7588505.876 4590073.663, 7588510.001 4590041.967, 7588518.25 4589987.91, 7588521.724 4589970.542, 7588529.105 4589950.787, 7588538.874 4589933.419, 7588544.953 4589924.518, 7588548.209 4589915.617, 7588548.209 4589908.888, 7588547.341 4589899.553, 7588540.394 4589885.007, 7588536.486 4589876.541, 7588536.704 4589869.377, 7588539.309 4589862.864, 7588541.263 4589849.839, 7588541.914 4589833.774, 7588540.395 4589823.787, 7588536.27 4589815.754, 7588535.836 4589805.768, 7588533.882 4589791.223, 7588528.237 4589776.46, 7588520.422 4589754.534, 7588512.172 4589731.305, 7588504.138 4589705.904, 7588499.362 4589683.761, 7588497.191 4589672.038, 7588495.889 4589659.88, 7588495.454 4589639.908, 7588492.849 4589623.843, 7588475.482 4589601.265, 7588472.877 4589596.489, 7588477.219 4589587.805, 7588493.283 4589553.07, 7588495.889 4589529.624, 7588497.625 4589512.691, 7588492.415 4589478.824, 7588489.376 4589447.562, 7588488.508 4589438.01, 7588494.152 4589421.945, 7588494.586 4589392.421, 7588497.305 4589393.113, 7588504.527 4589276.073, 7588528.841 4589250.022, 7588555.761 4589180.986, 7588571.392 4589153.632, 7588577.036 4589113.687, 7588600.482 4589078.518, 7588615.679 4589029.021, 7588661.269 4589002.535, 7588680.373 4589004.706, 7588745.936 4589013.824, 7588782.407 4589023.376, 7588806.722 4589032.494, 7588828.431 4589031.626, 7588838.82 4589009.04, 7588842.39 4589012.22, 7588860.25 4589019.76, 7588897.95 4589039.2, 7588948.75 4589064.21, 7588986.91 4589083.294, 7589032.066 4589128.884, 7589078.09 4589160.145, 7589115.43 4589182.722, 7589177.953 4589199.656, 7589259.58 4589192.709, 7589294.315 4589194.011, 7589344.247 4589200.958, 7589353.799 4589207.037, 7589343.813 4589219.194, 7589354.233 4589230.483, 7589373.337 4589236.562, 7589394.765 4589259.853), (7589335.875 4590000.595, 7589206.85 4589911.12, 7589115.106 4590050.519, 7589335.875 4590000.595), (7589394.765 4589259.853, 7589389.19 4589280.418, 7589488.941 4589297.251, 7589491.364 4589275.458, 7589427.593 4589264.696, 7589394.765 4589259.853), (7589548.78 4589613.711, 7589549.43 4589602.441, 7589553.767 4589565.816, 7589547.699 4589564.516, 7589496.767 4589556.93, 7589454.938 4589550.645, 7589445.182 4589597.889, 7589492.646 4589606.775, 7589548.78 4589613.711))";
	
	@Test
	public void testBoundsSave() throws ParseException {

		try (SvGeometry svg = new SvGeometry()) {
			GeometryFactory gf = SvUtil.sdiFactory;
			WKTReader wkr = new WKTReader(gf);
			Geometry geom =wkr.read(poly);
			DbDataObject dbounds = new DbDataObject(svCONST.OBJECT_TYPE_SDI_BOUNDS);
			dbounds.setVal("BOUNDS_NAME", "testBounds");
			dbounds.setVal("BOUNDS_ID", "123");
			dbounds.setVal("BOUNDS_CLASS", 1);
			dbounds.setVal("PERIMETER", 0);
			dbounds.setVal("AREA", 0);
			SvGeometry.setGeometry(dbounds, geom);
			svg.prepareGeometry(dbounds);
			// SvGeometry.allowBoundaryIntersect=true;
			// svg.setAllowNullGeometry(true);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			fail("Test failed with exception:" + e.getMessage());

		}
		if (SvConnTracker.hasTrackedConnections(false, false))
			fail("You have a connection leak, you dirty animal!");
	}

}
